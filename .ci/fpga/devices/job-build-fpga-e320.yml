#
# Copyright 2024 Ettus Research, a National Instruments Brand
#
# SPDX-License-Identifier: LGPL-3.0-or-later
#
# Description:
#
#   This template defines a stages-based pipeline for building E32X FPGA targets.
#
#   See https://aka.ms/yaml for pipeline YAML documentation.
#

parameters:
## Optional parameters
# Option to ignore cached artifacts (if available) and perform
# a clean IP build.
- name: clean_ip_build
  type: boolean
  default: false
# Number of parallel jobs to use for IP build
- name: num_ip_jobs
  type: number
  default: 5
# Option to publish intermediate files
- name: publish_int_files
  type: boolean
  default: false
# Package and publish images
- name: package_and_publish_images
  type: boolean
  default: true
# Package access in the SDR server ('Internal' or 'Public')
- name: package_access
  type: string
  default: 'Internal'
# From where to pull FPGA bitfiles if we're not building them
- name: fpga_imgs_source
  type: string
  default: 'Mono Pipeline'
# Build E320 FPGA targets
- name: build_e320
  type: boolean
  default: true
# E320 FPGA targets to build (if build_e320 is true)
- name: e320_full_targets_matrix
  type: object
  default:
    E320_1G:
      image_core: e320_rfnoc_image_core.yml
      target_name: E320_1G
      artifact_name: E320_1G
      image_core_name: usrp_e320_fpga_1G
      timeout: 720
      max_attempts: 2
    E320_XG:
      image_core: e320_rfnoc_image_core.yml
      target_name: E320_XG
      artifact_name: E320_XG
      image_core_name: usrp_e320_fpga_XG
      timeout: 720
      max_attempts: 2
    E320_AA:
      image_core: e320_rfnoc_image_core.yml
      target_name: E320_AA
      artifact_name: E320_AA
      image_core_name: usrp_e320_fpga_AA
      timeout: 720
      max_attempts: 2
- name: e320_reduced_targets_matrix
  type: object
  default:
    E320_XG:
      image_core: e320_rfnoc_image_core.yml
      target_name: E320_XG
      artifact_name: E320_XG
      image_core_name: usrp_e320_fpga_XG
      timeout: 720
      max_attempts: 2
    E320_1G:
      image_core: e320_rfnoc_image_core.yml
      target_name: E320_1G
      artifact_name: E320_1G
      image_core_name: usrp_e320_fpga_1G
      timeout: 720
      max_attempts: 2

stages:

### START: E320 stages
- stage: build_e320_ip_stage
  displayName: Build E320 IP
  dependsOn: analyze_changeset
  condition: and( succeeded(),
                  or(
                    contains(dependencies.analyze_changeset.outputs['analyze.gen_build_list.UhdChangeList'], 'fpga.usrp3.e320'),
                    contains(dependencies.analyze_changeset.outputs['analyze.gen_build_list.UhdChangeList'], 'fpga.usrp3.all'),
                    eq('${{ parameters.build_e320 }}', 'true')
                  )
                )
  jobs:
  - template: ../templates/job-build-ip.yml
    parameters:
      directory: uhddev/fpga/usrp3/top/e320
      ip_target: E320_IP
      clean_build: ${{ parameters.clean_ip_build }}
      num_jobs: ${{ parameters.num_ip_jobs }}

- stage: build_e320_targets_stage
  displayName: Build E320 FPGA Targets
  dependsOn: build_e320_ip_stage
  condition: succeeded('build_e320_ip_stage')
  jobs:
  - ${{ if eq(parameters.package_and_publish_images, true) }}:
    - template: ../templates/job-build-fpga.yml
      parameters:
        targets_matrix: ${{ parameters.e320_full_targets_matrix }}
        ip_artifact: E320_IP
        top_dir: uhddev/fpga/usrp3/top/e320
        publish_int_files: ${{ parameters.publish_int_files }}
  - ${{ if eq(parameters.package_and_publish_images, false) }}:
    - template: ../templates/job-build-fpga.yml
      parameters:
        targets_matrix: ${{ parameters.e320_reduced_targets_matrix }}
        ip_artifact: E320_IP
        top_dir: uhddev/fpga/usrp3/top/e320
        publish_int_files: ${{ parameters.publish_int_files }}
  - job: set_generated_artifact_variable
    displayName: Set Generated Artifact Variable
    steps:
    - checkout: none
    - script: |
        echo "##vso[task.setvariable variable=GeneratedArtifact;isOutput=true]true"
      displayName: Set Generated Artifact Variable
      name: set_generated_artifact_variable

- stage: create_e320_packages_stage
  displayName: Package & Publish E320 Binaries
  dependsOn: build_e320_targets_stage
  condition: and(succeeded('build_e320_targets_stage'), eq('${{ parameters.package_and_publish_images }}', 'true'))
  jobs:
  - template: ../templates/job-package-images.yml
    parameters:
      package_name: e3xx_e320_fpga_default
      artifacts_matrix: ${{ parameters.e320_full_targets_matrix }}
      build_directory: uhddev/fpga/usrp3/top/e320/build/
      package_access: ${{ parameters.package_access }}


- stage: guarantee_e320_artifacts_stage
  displayName: Guarantee E320 FPGA Artifacts
  dependsOn:
  - analyze_changeset
  - build_e320_targets_stage
  variables:
    UhdTestList: $[stageDependencies.analyze_changeset.analyze.outputs['gen_testlist.UhdTestList']]
    ArtifactsGenerated: $[iif(eq(stageDependencies.build_e320_targets_stage.set_generated_artifact_variable.outputs['set_generated_artifact_variable.GeneratedArtifact'], 'true'), 'Generated', 'NotGenerated')]
  # Run if previous stages are succeeded or skipped, but not if they failed or
  # were canceled. That's because the build stages are conditionally executed.
  condition: not(or(failed(), canceled()))
  jobs:
  - template: ../templates/job-guarantee-artifacts.yml
    parameters:
      id: e320
      ${{ if eq(parameters.package_and_publish_images, true) }}:
        artifacts_matrix: ${{ parameters.e320_full_targets_matrix }}
      ${{ else }}:
        artifacts_matrix: ${{ parameters.e320_reduced_targets_matrix }}
      ${{ if eq(parameters.fpga_imgs_source,  'Mono Pipeline PR') }}:
        uhdFpgaArtifactSource: uhd_mono_pipeline_pr
      ${{ elseif eq(parameters.fpga_imgs_source,  'FPGA Pipeline') }}:
        uhdFpgaArtifactSource: uhd_fpga_pipeline
      ${{ else }}:
        uhdFpgaArtifactSource: uhd_mono_pipeline

### END: E320 stages
